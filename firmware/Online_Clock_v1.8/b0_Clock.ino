//********** ФУНКЦИИ ДЛЯ WS2812B **********//


//Функция мигания точками на часах (Выбор на WEB интерфейсе мигать раз в секунду или в 0,5 секунд)
void Dots() {
  // Получить значение переменной из конфига "crm.var("ID")"
  TimeDot = crm.var("Time_Dot") == "1";  // Считываем состояние ("1" - это true (условие проверки), так проще написать, так как WEB интерфейс возвращает String)
  static uint32_t tmr_Dot = 0;           // Таймер для мигания точками на часах раз в 0,5 или 1 секунду

  if (TimeDot == true) {  //  Если поднят флаг "TimeDot", то Вкл. точки на часах раз в секунду
    if (millis() - tmr_Dot >= 1000) {
      tmr_Dot = millis();  // Записываем новое время в "tmr_Dot"
      Dot = !Dot;          // Меняем состояние точек на часах на противоположное один раз в 1 сек
    }
  }

  if (TimeDot == false) {  //  Если опущен флаг "TimeDot", то Вкл. точки на часах раз в 0,5 секунды
    if (millis() - tmr_Dot >= 500) {
      tmr_Dot = millis();  // Записываем новое время в "tmr_Dot"
      Dot = !Dot;          // Меняем состояние точек на часах на противоположное один раз в 0,5 сек
    }
  }
}


//Преобразование времени в массив, для отображения на часах
// int TimeToArray( int [входящие числа от 1 до 4 знаков, к примеру время 12:57 будет как 1257])
void TimeToArray(int DataIn) {
  int cursor = 58;  // Номер последнего светодиода (для определения позиции на ленте). Вывод на LED идёт с конца к началу!


  //Переключение двоеточия на часах (раз в 1 или 0,5 сек, в зависимости, от переключателя на WEB интерфейсе)
  if (Dot == true) {                                              // Если true, то...
    if (Regim_Color == 2 && Flag_Each_Sigment == true) {          // Устанавливаем цвет в зависимости от режима и флага разноцветных сегментов (для каждого сегмента свой цвет)
      leds[28].setHue(RndDotHUE);                                 // Если Вкл. 2 режим (Рандомные цвета) и ПОДНЯТ флаг для разноцветных сегментов, то устанавливаем рандомный цвет для верхней точки
      leds[29].setHue(RndDotHUE);                                 // Если Вкл. 2 режим (Рандомные цвета) и ПОДНЯТ флаг для разноцветных сегментов, то устанавливаем рандомный цвет для нижний точке
    } else if (Regim_Color == 2 && Flag_Each_Sigment == false) {  // Устанавливаем цвет в зависимости от режима и флага разноцветных сегментов (для всех сегментов один цвет)
      leds[28].setHue(RndAllSegmHUE);                             // Если Вкл. 2 режим (Рандомные цвета) и ОПУЩЕН флаг для разноцветных сегментов, то устанавливаем рандомный цвет для обоих точек
      leds[29].setHue(RndAllSegmHUE);                             // Если Вкл. 2 режим (Рандомные цвета) и ОПУЩЕН флаг для разноцветных сегментов, то устанавливаем рандомный цвет для обоих точек
      // } else if (Regim_bright == 2 && Flag_RedNight == true) {      // Если Вкл. 2 режим яркости (По расписанию) и поднят флаг разрешающий Вкл. красный цвет на часах (то есть настало ночное время)...
      //   leds[cursor] = 0xff0000;                                    // То включаем его
    } else {
      leds[28] = ledColor;  // Иначе используем общую переменную для "Палитра цветов" или "Рандомные цвета" на обе точки
      leds[29] = ledColor;  // Задаём цвет (включаем)
    }

  } else {                // Если точки должны быть выключены в данный момент, то выключаем их
    leds[28] = 0x000000;  // Чёрный цвет (выключен)
    leds[29] = 0x000000;  // Чёрный цвет (выключен)
  };



  for (byte i = 1; i <= 4; i++) {  // Обработываем все 4 сегмента
    int digit = DataIn % 10;       // Получить последнюю цифру минут через остаток от деления


    //4-й сегмент
    if (i == 1) {
      // Serial.print("Digit 4 is : "); Serial.println(digit);    // Для отладки
      cursor = 44;  // Перемещаем курсор на начало последнего сегмента

      for (byte k = 0; k <= 13; k++) {  // Счётчик для каждого светодиода в 4-м сегменте
        if (digits[digit][k] == 1) {    // Если массив для цифр с подставленным временем "digit" и счётчиком "k" равен 1, то...
          //Устанавливаем цвет в зависимости от режима и флага разноцветных сегментов в заданный курсором диапазоне (от 44 до 58 светодиод)
          if (Regim_Color == 2 && Flag_Each_Sigment == true) {  // Если Вкл. 2 режим (Рандомные цвета) и ПОДНЯТ флаг для разноцветных сегментов, то устанавливаем рандомный цвет для 4-го сегмента
            leds[cursor].setHue(RndFourHUE);
          } else if (Regim_Color == 2 && Flag_Each_Sigment == false) {  // Если Вкл. 2 режим (Рандомные цвета) и ОПУЩЕН флаг для разноцветных сегментов, то устанавливаем рандомный цвет на все сегменты
            leds[cursor].setHue(RndAllSegmHUE);
            // } else if (Regim_bright == 2 && Flag_RedNight == true) {  // Если Вкл. 2 режим яркости (По расписанию) и поднят флаг разрешающий Вкл. красный цвет на часах (то есть настало ночное время)...
            //   leds[cursor] = 0xff0000;                                // То включаем его
          } else {
            leds[cursor] = ledColor;  // Иначе используем общую переменную для "Палитра цветов" или "Рандомные цвета" на все сегменты
          }
        } else if (digits[digit][k] == 0) {  // Иначе, если массив для цифр с подставленным временем "digit" и счётчиком "k" равен 0, то...
          leds[cursor] = 0x000000;           // Окрашиваем в чёрный цвет (выключаем)
        };
        cursor++;  // Переводим курсор на следующий светодиод и повторяем по кругу
      };


      //Эффект переключения минут (срабатывает каждую минуту, если включено на WEB интерфейсе)
      if (crm.var("Sw_Clock_Ef") == "1") {  // Если флаг смены минут на часах поднят, то включаем функцию с эффектом
        if (digit != last_digit) {          // Если последня цифра минуты не равна предыдущему значению из "last_digit", то...
          cylon();                          // Применяем функцию с эффектом переключения
        }
        last_digit = digit;  // Запоминаем последнюю цифру минуты в "last_digit"
      }

      //3-й сегмент
    } else if (i == 2) {
      // Serial.print("Digit 3 is : "); Serial.println(digit);    // Для отладки
      cursor = 30;  // Перемещаем курсор на 14 светодиодов назад

      for (byte k = 0; k <= 13; k++) {  // Счётчик для каждого светодиода в 3-м сегменте
        if (digits[digit][k] == 1) {    // Если массив для цифр с подставленным временем "digit" и счётчиком "k" равен 1, то...
          //Устанавливаем цвет в зависимости от режима и флага разноцветных сегментов в заданный курсором диапазоне (от 30 до 44 светодиод)
          if (Regim_Color == 2 && Flag_Each_Sigment == true) {  // Если Вкл. 2 режим (Рандомные цвета) и ПОДНЯТ флаг для разноцветных сегментов, то устанавливаем рандомный цвет для 3-го сегмента
            leds[cursor].setHue(RndThreeHUE);
          } else if (Regim_Color == 2 && Flag_Each_Sigment == false) {  // Если Вкл. 2 режим (Рандомные цвета) и ОПУЩЕН флаг для разноцветных сегментов, то устанавливаем рандомный цвет на все сегменты
            leds[cursor].setHue(RndAllSegmHUE);
            // } else if (Regim_bright == 2 && Flag_RedNight == true) {  // Если Вкл. 2 режим яркости (По расписанию) и поднят флаг разрешающий Вкл. красный цвет на часах (то есть настало ночное время)...
            //   leds[cursor] = 0xff0000;                                // То включаем его
          } else {
            leds[cursor] = ledColor;  // Иначе используем общую переменную для "Палитра цветов" или "Рандомные цвета" на все сегменты
          }

        } else if (digits[digit][k] == 0) {  // Иначе, если массив для цифр с подставленным временем "digit" и счётчиком "k" равен 0, то...
          leds[cursor] = 0x000000;           // Окрашиваем в чёрный цвет (выключаем)
        };
        cursor++;  // Переводим курсор на следующий светодиод и повторяем по кругу
      };


      //2-й сегмент
    } else if (i == 3) {
      // Serial.print("Digit 2 is : "); Serial.println(digit);    // Для отладки
      cursor = 14;  // Перемещаем ещё курсор на 14 светодиодов назад

      for (byte k = 0; k <= 13; k++) {  // Счётчик для каждого светодиода в 2-м сегменте
        if (digits[digit][k] == 1) {    // Если массив для цифр с подставленным временем "digit" и счётчиком "k" равен 1, то...
          //Устанавливаем цвет в зависимости от режима и флага разноцветных сегментов в заданный курсором диапазоне (от 14 до 30 светодиод)
          if (Regim_Color == 2 && Flag_Each_Sigment == true) {  // Если Вкл. 2 режим (Рандомные цвета) и ПОДНЯТ флаг для разноцветных сегментов, то устанавливаем рандомный цвет для 2-го сегмента
            leds[cursor].setHue(RndTwoHUE);
          } else if (Regim_Color == 2 && Flag_Each_Sigment == false) {  // Если Вкл. 2 режим (Рандомные цвета) и ОПУЩЕН флаг для разноцветных сегментов, то устанавливаем рандомный цвет на все сегменты
            leds[cursor].setHue(RndAllSegmHUE);
            // } else if (Regim_bright == 2 && Flag_RedNight == true) {  // Если Вкл. 2 режим яркости (По расписанию) и поднят флаг разрешающий Вкл. красный цвет на часах (то есть настало ночное время)...
            //   leds[cursor] = 0xff0000;                                // То включаем его
          } else {
            leds[cursor] = ledColor;  // Иначе используем общую переменную для "Палитра цветов" или "Рандомные цвета" на все сегменты
          }

        } else if (digits[digit][k] == 0) {  // Иначе, если массив для цифр с подставленным временем "digit" и счётчиком "k" равен 0, то...
          leds[cursor] = 0x000000;           // Окрашиваем в чёрный цвет (выключаем)
        };
        cursor++;  // Переводим курсор на следующий светодиод и повторяем по кругу
      };



      //1-й сегмент
    } else if (i == 4) {
      // Serial.print("Digit 1 is : "); Serial.println(digit);    // Для отладки
      cursor = 0;  // Перемещаем курсор в самое начало

      for (byte k = 0; k <= 13; k++) {
        if (digits[digit][k] == 1) {  // Если массив для цифр с подставленным временем "digit" и счётчиком "k" равен 1, то...
          //Устанавливаем цвет в зависимости от режима и флага разноцветных сегментов в заданный курсором диапазоне (от 0 до 14 светодиод)
          if (Regim_Color == 2 && Flag_Each_Sigment == true) {  // Если Вкл. 2 режим (Рандомные цвета) и ПОДНЯТ флаг для разноцветных сегментов, то устанавливаем рандомный цвет для 1-го сегмента
            leds[cursor].setHue(RndOneHUE);
          } else if (Regim_Color == 2 && Flag_Each_Sigment == false) {  // Если Вкл. 2 режим (Рандомные цвета) и ОПУЩЕН флаг для разноцветных сегментов, то устанавливаем рандомный цвет на все сегменты
            leds[cursor].setHue(RndAllSegmHUE);
            // } else if (Regim_bright == 2 && Flag_RedNight == true) {  // Если Вкл. 2 режим яркости (По расписанию) и поднят флаг разрешающий Вкл. красный цвет на часах (то есть настало ночное время)...
            //   leds[cursor] = 0xff0000;                                // То включаем его
          } else {
            leds[cursor] = ledColor;  // Иначе используем общую переменную для "Палитра цветов" или "Рандомные цвета" на все сегменты
          }

        } else if (digits[digit][k] == 0) {  // Иначе, если массив для цифр с подставленным временем "digit" и счётчиком "k" равен 0, то...
          leds[cursor] = 0x000000;           // Окрашиваем в чёрный цвет (выключаем)
        }
        if (i == 4 & digit == 0) {  // Если выбран 1-й сегмент и присутствует цифра "ноль", то выключаем его (например, получили (чило 234) - это время 02:34, а будет выведено как 2:34)
          leds[cursor] = 0x000000;  // Выключаем все LED в первом сегменте
        };
        cursor++;  // Переводим курсор на следующий светодиод и повторяем по кругу
      };
      //Serial.println();   // Абзац для отладки
    }
    DataIn /= 10;  // Делим наше время на 10 для отсечки последнего числа (дробная часть отбрасывается), и запускаем цикл по новой (всего 4 раза), тем самым получаем все 4 числа с конца к началу
  };
  FastLED.show();  // Отобразить буфер LED на часы
}



//Преобразование температуры в массив, для отображения на часах
// int TempToArray( int [входящие числа от 1 до 3 знаков, к примеру температура 21.3 будет как 213] )
void TempToArray(int DataTempIn) {
  int cursor = 58;  // Номер последнего светодиода (для определения позиции на ленте). Вывод на LED идёт с конца к началу!

  //Устанавливаем цвет в зависимости от режима и флага разноцветных сегментов
  if (Regim_Color == 2 && Flag_Each_Sigment == true) {  // Если Вкл. 2 режим (Рандомные цвета) и ПОДНЯТ флаг для разноцветных сегментов, то устанавливаем рандомный цвет для нижний точке
    leds[29].setHue(RndDotHUE);
  } else if (Regim_Color == 2 && Flag_Each_Sigment == false) {  // Если Вкл. 2 режим (Рандомные цвета) и ОПУЩЕН флаг для разноцветных сегментов, то устанавливаем рандомный цвет на все сегменты
    leds[29].setHue(RndAllSegmHUE);
    // } else if (Regim_bright == 2 && Flag_RedNight == true) {  // Если Вкл. 2 режим яркости (По расписанию) и поднят флаг разрешающий Вкл. красный цвет на часах (то есть настало ночное время)...
    //   leds[cursor] = 0xff0000;                                // То включаем его
  } else {
    leds[29] = ledColor;  // Иначе используем общую переменную для "Палитра цветов" или "Рандомные цвета" на обе точки
  }

  cursor = 44;  // Перемещаем курсор на начало последнего сегмента

  //Вывод маленького знака "C" (Цельсия) в 4-м сегменте
  for (byte с = 0; с <= 13; с++) {  // Счётчик для каждого светодиода в 4-м сегменте
    if (symbols[с] == 1) {          // Ищем в первом массиве цифры "1" и...
      //Устанавливаем цвет в зависимости от режима и флага разноцветных сегментов в заданный курсором диапазоне (от 44 до 58 светодиод)
      if (Regim_Color == 2 && Flag_Each_Sigment == true) {  // Если Вкл. 2 режим (Рандомные цвета) и ПОДНЯТ флаг для разноцветных сегментов, то устанавливаем рандомный цвет для маленького знака "C" (Цельсия)
        leds[cursor].setHue(RndFourHUE);
      } else if (Regim_Color == 2 && Flag_Each_Sigment == false) {  // Если Вкл. 2 режим (Рандомные цвета) и ОПУЩЕН флаг для разноцветных сегментов, то устанавливаем рандомный цвет на все сегменты
        leds[cursor].setHue(RndAllSegmHUE);
        // } else if (Regim_bright == 2 && Flag_RedNight == true) {  // Если Вкл. 2 режим яркости (По расписанию) и поднят флаг разрешающий Вкл. красный цвет на часах (то есть настало ночное время)...
        //   leds[cursor] = 0xff0000;                                // То включаем его
      } else {
        leds[cursor] = ledColor;  // Иначе используем общую переменную для "Палитра цветов" или "Рандомные цвета" на все сегменты
      }

    } else if (symbols[с] == 0) {  // Иначе, если находим в первом массиве цифры "0"...
      leds[cursor] = 0x000000;     // Окрашиваем в чёрный цвет (выключаем)
    };
    cursor++;  // Переводим курсор на следующий светодиод и повторяем по кругу, пока не обработаем весь сегмент
  };


  //Обработака и вывод температуры на сегменты
  // 3-й сегмент
  for (byte i = 1; i <= 3; i++) {   // Обработываем 3 сегмента
    int T_Digit = DataTempIn % 10;  // Получаем последнюю цифру температуры через остаток от деления

    if (i == 1) {
      cursor = 30;  // Перемещаем курсор на 14 пикселей к началу

      for (byte t = 0; t <= 13; t++) {  // Счётчик для каждого светодиода в 3-м сегменте (от 30 до 44 светодиода)
        if (digits[T_Digit][t] == 1) {  // Ищем в массиве цифр для LED число от полученной температуры, находим и проверяем какие пиксели включать - "1"...
          //Устанавливаем цвет в зависимости от режима и флага разноцветных сегментов в заданный курсором диапазоне
          if (Regim_Color == 2 && Flag_Each_Sigment == true) {  // Если Вкл. 2 режим (Рандомные цвета) и ПОДНЯТ флаг для разноцветных сегментов, то устанавливаем рандомный цвет для 3-го сегмента
            leds[cursor].setHue(RndThreeHUE);
          } else if (Regim_Color == 2 && Flag_Each_Sigment == false) {  // Если Вкл. 2 режим (Рандомные цвета) и ОПУЩЕН флаг для разноцветных сегментов, то устанавливаем рандомный цвет на все сегменты
            leds[cursor].setHue(RndAllSegmHUE);
            // } else if (Regim_bright == 2 && Flag_RedNight == true) {  // Если Вкл. 2 режим яркости (По расписанию) и поднят флаг разрешающий Вкл. красный цвет на часах (то есть настало ночное время)...
            //   leds[cursor] = 0xff0000;                                // То включаем его
          } else {
            leds[cursor] = ledColor;  // Иначе используем общую переменную для "Палитра цветов" или "Рандомные цвета" на все сегменты
          }

        } else if (digits[T_Digit][t] == 0) {  // Иначе ищем в массиве цифр для LED число от полученной температуры, находим и проверяем какие пиксели выключить - "0"...
          leds[cursor] = 0x000000;             // Окрашиваем в чёрный цвет (выключаем) сегменты с "0"
        };
        cursor++;  // Переводим курсор на следующий пиксель и повторяем по кругу
      };


      //2-й сегмент
    } else if (i == 2) {
      cursor = 14;  // Перемещаем курсор ещё на 14 пикселей к началу

      for (byte t = 0; t <= 13; t++) {  // Счётчик для каждого светодиода во 2-м сегменте (от 14 до 30 светодиода)
        if (digits[T_Digit][t] == 1) {  // Ищем в массиве цифр для LED число от полученной температуры, находим и проверяем какие пиксели включать - "1"...
          //Устанавливаем цвет в зависимости от режима и флага разноцветных сегментов в заданный курсором диапазоне
          if (Regim_Color == 2 && Flag_Each_Sigment == true) {  // Если Вкл. 2 режим (Рандомные цвета) и ПОДНЯТ флаг для разноцветных сегментов, то устанавливаем рандомный цвет для 2-го сегмента
            leds[cursor].setHue(RndTwoHUE);
          } else if (Regim_Color == 2 && Flag_Each_Sigment == false) {  // Если Вкл. 2 режим (Рандомные цвета) и ОПУЩЕН флаг для разноцветных сегментов, то устанавливаем рандомный цвет на все сегменты
            leds[cursor].setHue(RndAllSegmHUE);
            // } else if (Regim_bright == 2 && Flag_RedNight == true) {  // Если Вкл. 2 режим яркости (По расписанию) и поднят флаг разрешающий Вкл. красный цвет на часах (то есть настало ночное время)...
            //   leds[cursor] = 0xff0000;                                // То включаем его
          } else {
            leds[cursor] = ledColor;  // Иначе используем общую переменную для "Палитра цветов" или "Рандомные цвета" на все сегменты
          }

        } else if (digits[T_Digit][t] == 0) {  // Иначе ищем в массиве цифр для LED число от полученной температуры, находим и проверяем какие пиксели выключить - "0"...
          leds[cursor] = 0x000000;             // Окрашиваем в чёрный цвет (выключаем) сегменты с "0"
        };
        cursor++;  // Переводим курсор на следующий пиксель и повторяем по кругу
      };



      //1-й сегмент
    } else if (i == 3) {
      cursor = 0;  // Перемещаем курсор в самое начало

      for (byte t = 0; t <= 13; t++) {  // Счётчик для каждого светодиода в 1-м сегменте (от 0 до 14 светодиода)
        if (digits[T_Digit][t] == 1) {  // Ищем в массиве цифр для LED число от полученной температуры, находим и проверяем какие пиксели включать - "1"...
          //Устанавливаем цвет в зависимости от режима и флага разноцветных сегментов в заданный курсором диапазоне
          if (Regim_Color == 2 && Flag_Each_Sigment == true) {  // Если Вкл. 2 режим (Рандомные цвета) и ПОДНЯТ флаг для разноцветных сегментов, то устанавливаем рандомный цвет для 1-го сегмента
            leds[cursor].setHue(RndOneHUE);
          } else if (Regim_Color == 2 && Flag_Each_Sigment == false) {  // Если Вкл. 2 режим (Рандомные цвета) и ОПУЩЕН флаг для разноцветных сегментов, то устанавливаем рандомный цвет на все сегменты
            leds[cursor].setHue(RndAllSegmHUE);
            // } else if (Regim_bright == 2 && Flag_RedNight == true) {  // Если Вкл. 2 режим яркости (По расписанию) и поднят флаг разрешающий Вкл. красный цвет на часах (то есть настало ночное время)...
            //   leds[cursor] = 0xff0000;                                // То включаем его
          } else {
            leds[cursor] = ledColor;  // Иначе используем общую переменную для "Палитра цветов" или "Рандомные цвета" на все сегменты
          }

        } else if (digits[T_Digit][t] == 0) {  // Иначе ищем в массиве цифр для LED число от полученной температуры, находим и проверяем какие пиксели выключить - "0"...
          leds[cursor] = 0x000000;             // Окрашиваем в чёрный цвет (выключаем) сегменты с "0"
        }
        if (i == 3 & T_Digit == 0) {  // Если выбран 1-й сегмент и присутствует цифра "ноль", то выключаем его (например, получили (чило 87) - это температура 08.7°, а будет выведено как 8.7°)
          leds[cursor] = 0x000000;    // Выключаем все LED в первом сегменте
        };
        cursor++;  // Переводим курсор на следующий пиксель и повторяем по кругу
      };
    }
    DataTempIn /= 10;  // Делим температуру на 10 для отсечки последнего числа (дробная часть отбрасывается), и запускаем цикл обработки всех сегментов по новой, тем самым получаем все 2 или 3 числа с конца к началу
  };
  FastLED.show();  // Отобразить буфер температуры на LED часы
}


//Функция подачи ежечасного сигнала
void Hourly_Signal() {
  if (minute == 30) Flag_One_Sig = true;  // Поднимаем флаг единоразовой подачи звука раз в час до подачи звука

  if (minute == 0 && second == 0) {          // Проверяем время, если на часах 00 минут и 00 секунд, то...
    Flag_Sig = crm.var("Hour_Sign") == "1";  // Считываем состояние ("1" - это true (условие проверки), так проще написать, так как WEB интерфейс возвращает String)

    if (Flag_One_Sig == true) {  // Если флаг одноразовой подачи звука поднят, то...
      Flag_One_Sig = false;      // Опускаем флаг
      buzHourly();               // И подаём сигнал
    }
  }
}
