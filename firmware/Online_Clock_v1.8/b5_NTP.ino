//********** ФУНКЦИИ ПОЛУЧЕНИЯ ВРЕМЕНИ С NTP **********//



//Функция для настройки NTP через WEB интерфейс
void SetupNTP() {
  //Получаем значение из конфига json через WebFramework "CRMui"
  // crm.var(["ID переменной"])
  static int set_gtm = crm.var("NTP_GTM").toInt() * 3600U;               // Получаем из конфига часовой пояс GTM "в часах" (часовой пояс = число * 3600U), (U - unsigned, выделяем память для беззнаковой константы)
  static uint32_t set_period = crm.var("NTP_Period").toInt() * 60000UL;  // Получаем из конфига период обновления "в минутах" (количество миллисекунд = количество минут * 60000), (UL - unsigned long, выделяем память для беззнаковой константы)
  static String pool_X = crm.var("NTP_Pool");                            // Получаем хост в пул из конфига (как строку)

  //Блок "String to const char*" для корректного перевода строки в массив символов и конвертации в (const char*). Необходим для установки хоста при чтении с WEB интерфейса
  static char Buf_X[sizeof(pool_X)];             // Создаём буфер и вычисляем его размер
  pool_X.toCharArray(Buf_X, sizeof(pool_X));     // myString.toCharArray(buf, len) – записывает строку в массив – буфер buf_X (типа char []) с начала и до длины len.
  static const char* set_host = pool_X.c_str();  // Возвращаем указатель на массив символов "pool_X" с завершающим нулем, который содержит данные, идентичные тем, что хранятся в строке и пишем в "set_host"

  //Устанавливаем значения
  ntp.setTimeOffset(set_gtm);         // Устанавливаем часовой пояс "в часах"
  ntp.setUpdateInterval(set_period);  // Устанавливаем период обновления "в минутах"
  ntp.setPoolServerName(set_host);    // Устанавливаем NTP хост для запросов
}



//Функция получения часов и минут как одно int число в глобальные переменные
int GetTime() {
  hour = ntp.getHours();      // Получаем часы
  minute = ntp.getMinutes();  // Получаем минуты
  second = ntp.getSeconds();  // Получаем секунды (используются для других условий в коде)

  Dots();                        // Вызываем функцию мигания точками на часах
  return (hour * 100 + minute);  // Возвращаем часы и минуты как одно int число
}



//Принудительная синхронизация времени через WEB интерфейс
void ForceupdateNTP() {
  ntp.forceUpdate();  // Принудительно обновляем время

  // crm.webNotif("[Цвет]", "[Сообщение]", [время показа, с], [крестик закрыть (1, true)]);
  // Цвет: green, red, orange, blue, "" - без цвета
  crm.webNotif("orange", "NTP синхронизирован", SHOW_NOTIFIC, CROSS_CLOSE);  // Отправить уведомление на страницу веб интерфейса
}



//Функция синхронизации времени и даты
void GetTimeDate() {
  static uint32_t tmrPRs = 0;  // Объявляем статическую переменную для таймера (сохраняет свои значения между вызовами функции)

  if (millis() - tmrPRs >= 1000) {  // Проверяем раз в 1 сек
    tmrPRs = millis();              // Обнуляем таймер

    //Функция "ntp.update()" НЕ будет обновлять время, пока не пройдёт время периода обновления "ntp.setUpdateInterval(set_period)", если время периода прошло, то вызов функции "ntp.update()" обновит время
    // if (ntp.update()) {  // Если данные с NTP успешно обновлены (возвращает "true" при успехе), то...
    ntp.update();
    val_Time_NTP = ntp.getFormattedTime();  // Получаем время с NTP и конвертируем в строку
    val_Date_NTP = ntp.getFormattedDate();  // Получаем дату с NTP и конвертируем в строку

    // Обновление значений элементов веб интерфейса
    // crm.webUpdate("[ID элемента]", "[Значение]"); Интервал отправки 1 раз в сек.
    crm.webUpdate("NTP_val_Time", val_Time_NTP);  // Пишем в ID WEB интерфейс время с глобальной переменной (просто обновляем значение без перезагрузки страницы)
    crm.webUpdate("NTP_val_Date", val_Date_NTP);  // Пишем в ID WEB интерфейс дату с глобальной переменной (просто обновляем значение без перезагрузки страницы)
  }
}